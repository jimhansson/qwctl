/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c QWCtl -p qwctl_proxy se.liu.lysator.qwctl.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QWCTL_PROXY_H_1278976819
#define QWCTL_PROXY_H_1278976819

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QtCore/QDebug>

/*
 * Proxy class for interface se.liu.lysator.qwctl
 */
class QWCtl: public QDBusAbstractInterface
{
  Q_OBJECT
  public:
  static inline const char *staticInterfaceName()
  { return "se.liu.lysator.qwctl"; }

 public:
  QWCtl(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

  ~QWCtl();

  Q_PROPERTY(QString name READ name WRITE setName)
  inline QString name() const
  { return qvariant_cast< QString >(property("name")); }
  inline void setName(const QString &value)
  { setProperty("name", qVariantFromValue(value)); }

 public Q_SLOTS: // METHODS
  inline QDBusPendingReply<> setMinimized(bool minimize)
  {
    qDebug() << "Proxy: " + QString(__func__);
    QList<QVariant> argumentList;
    argumentList << qVariantFromValue(minimize);
    return asyncCallWithArgumentList(QLatin1String("setMinimized"), argumentList);
  }

  inline QDBusPendingReply<> setPosition(int x, int y)
  {
    qDebug() << "Proxy: " + QString(__func__);
    QList<QVariant> argumentList;
    argumentList << qVariantFromValue(x) << qVariantFromValue(y);
    return asyncCallWithArgumentList(QLatin1String("setPosition"), argumentList);
  }

  inline QDBusPendingReply<> setSize(int x, int y)
  {
    qDebug() << "Proxy: " + QString(__func__);
    QList<QVariant> argumentList;
    argumentList << qVariantFromValue(x) << qVariantFromValue(y);
    return asyncCallWithArgumentList(QLatin1String("setSize"), argumentList);
  }

 Q_SIGNALS: // SIGNALS
  void applicationClosed();
  void applicationInfo(const QVariant &info);
};

namespace se {
namespace liu {
namespace lysator {
typedef ::QWCtl qwctl;
}
}
}
#endif
