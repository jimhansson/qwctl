/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c QWCtlAdaptor -a qwctl_adaptor se.liu.lysator.qwctl.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "qwctl_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtCore/QDebug>

#include <QtGui>

/*
 * Implementation of adaptor class QWCtlAdaptor
 */

// OBS This adaptor shall NOT be autogenerated. We assume or expect this
// adaptor to get its hands on the QMainWindow of the application nothing
// else.

QWCtlAdaptor::QWCtlAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
  // constructor
  setAutoRelaySignals(true);
}

QWCtlAdaptor::~QWCtlAdaptor()
{
  // destructor
}

QString QWCtlAdaptor::name() const
{
  // get the value of property name
  return qvariant_cast< QString >(parent()->property("name"));
}

void QWCtlAdaptor::setName(const QString &value)
{
  // set the value of property name
  parent()->setProperty("name", qVariantFromValue(value));
  qDebug() << __func__;
}

void QWCtlAdaptor::setMinimized(bool minimize)
{
  // handle method call se.liu.lysator.qwctl.setMinimized
  qDebug() << __func__ << ":" << minimize;
  foreach (QWidget* w, QApplication::topLevelWidgets()) {
    if (w->isWindow()) {
      if (minimize)
        w->hide();
      else
        w->show();
    }
  }
}

void QWCtlAdaptor::setPosition(int x, int y)
{
  // handle method call se.liu.lysator.qwctl.setPosition
  QMetaObject::invokeMethod(parent(), "setPosition", Q_ARG(int, x), Q_ARG(int, y));
  qDebug() << __func__;
  foreach (QWidget* w, QApplication::topLevelWidgets()) {
    if (w->isWindow()) w->move(x,y);
  }
}

void QWCtlAdaptor::setSize(int x, int y)
{
  // handle method call se.liu.lysator.qwctl.setSize
  QMetaObject::invokeMethod(parent(), "setSize", Q_ARG(int, x), Q_ARG(int, y));
  qDebug() << __func__ << " -- " << x << ":" << y;
  foreach (QWidget* w, QApplication::topLevelWidgets()) {
    if (w->isWindow()) w->resize(x,y);
  }
}
